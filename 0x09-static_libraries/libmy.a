!<arch>
0-isupper.c/    0           0     0     644     250       `
#include "main.h"
/**
*_isupper - function that verifies if a  character is uppercase or not
*@c: tested character
*Return: returns 1 if it is uppercase , 0 if not
*/

int _isupper(int c)
{
	if ((c >= 'A') && (c <= 'Z'))
		return (1);
	return (0);
}
0-memset.c/     0           0     0     644     397       `
#include "main.h"
/**
* _memset - function fills the memory with a constant byte
*
* @s: pointer to the area of memory to be filled
* @b: the constant that will be used to fill the memory
* @n: the number of bytes to be filled
*
* Return: always returns pointer s
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int j;

	for (j = 0; n > 0; j++, n--)
	{
		s[j] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     372       `
#include "main.h"

/**
* _strcat - function concatenates two strings
*
* @dest: the first string
* @src: the second string
*
* Return: returns pointer points to the concatenated strings
*
*/

char *_strcat(char *dest, char *src)
{
	int i, j;

	for (i = 0; dest[i] != '\0';)
	{
		i++;
	}
	for (j = 0; src[j] != '\0'; j++)
	{
		dest[i] = src[j];
		++i;
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     594       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}
1-isdigit.c/    0           0     0     644     246       `
#include "main.h"
/**
*_isdigit - function that verifies if a  character is a digit or not
*@c: tested character
*Return: returns 1 if it is uppercase , 0 if not
*/

int _isdigit(int c)
{
	if ((c >= 48) && (c <= 57))
		return (1);
	return (0);
}
1-memcpy.c/     0           0     0     644     390       `
#include "main.h"
/**
* _memcpy - function copies an area of a momery
*
* @src: the memory area to be copied from
* @dest: the memory area to be copied to
* @n: the number of bytes to be copied
*
* Return: always returs te pointer dest
*
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; n  > 0; i++, n--)
	{
		dest[i] = src[i];
	}

	return (dest);
}
1-strncat.c/    0           0     0     644     495       `
#include "main.h"

/**
* _strncat - function concatenates two strings but specifies
* the maximum number of characters
*
* @dest: the first string
* @src: the second string
* @n: the maximum number of characters
*
* Return: returns pointer points to the concatenated strings
*
*/

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	for (i = 0; dest[i] != '\0';)
	{
		i++;
	}
	for (j = 0; j < n && src[j] != '\0'; j++)
	{
		dest[i] = src[j];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     373       `
#include "main.h"
/**
* _strchr - function that locates a character in a string
*
* @c: The char to be located
* @s: The string to be looked in
*
* Return: always returns a pointer to the first occurrence
* of the character c
*
*/
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return ('\0');
}

2-strlen.c/     0           0     0     644     226       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: string to evaluate
 *
 * Return: the length of the string
 */
int _strlen(char *s)
{
	int i;

	i = 0;
	while (s[i] != '\0')
	{
		i++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     511       `
#include "main.h"

/**
* _strncpy - function copies strings from source to destination but specifies
* the maximum number of characters to be copied
*
* @dest: the first string
* @src: the second string
* @n: the maximum number of characters
*
* Return: returns pointer points to the strings after copied the source
*
*/
char *_strncpy(char *dest, char *src, int n)
{
	int j;


	for (j = 0; j < n && src[j] != '\0'; j++)
	{
		dest[j] = src[j];
	}
	while (j < n)
	{
		dest[j] = '\0';
		++j;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     312       `
#include "main.h"

/**
* _islower - program entry
*
* Describtion: The program checks the letter if is it a lowercase or not
*
* @c: is the letter to be checked
*
* Return: The program always returns 0 if the letter is a lowercase
*/

int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	return (0);
}
3-puts.c/       0           0     0     644     216       `
#include "main.h"

/**
 * _puts - prints a string to stdout
 * @str: pointer to the string to print
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     417       `
#include "main.h"

/**
* _strcmp - function compares two strings
*
* @s1: the first string
* @s2: the second string
*
* Return: returns int value
*
*/
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; ++i)
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
	}

	if (s1[i] != '\0')
	{
		return (s1[i]);
	}
	else if (s2[i] != '\0')
	{
		return (-s2[i]);
	}
	return (0);
}

3-strspn.c/     0           0     0     644     531       `
#include "main.h"
/**
*  _strspn - a function that gets the length of a prefix substring
*
* @s: The string to be scaned
* @accept: the string to be looked for
*
* Return: returns the length of the intial segment
*
*/
unsigned int _strspn(char *s, char *accept)
{
	unsigned int counter = 0;
	int i;
	int j;

	for (i = 0; s[i] != '\0'; ++i)
	{
		for (j = 0; accept[j] != '\0'; ++j)
		{
			if (s[i] == accept[j])
			{
				counter =  counter + 1;
				break;
			}
		}
		if (accept[j] == '\0')
		{
			break;
		}
	}
	return (counter);
}

4-isalpha.c/    0           0     0     644     307       `
#include "main.h"

/**
* _isalpha - program entry
*
* Describtion: The program checks if it is a  letter
*
* @c: is the letter to be checked
*
* Return: The program always returns 0 if it is a letter
*/

int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
		return (1);
	return (0);
}

4-strpbrk.c/    0           0     0     644     416       `
#include "main.h"
/**
* _strpbrk - a function that searches a string for any of a set of bytes.
*
* @s: the string to be looked for
* @accept: the string to be looked within
*
* Return: a pointer
*
*
*
*/
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0 ; s[i] != '\0'; ++i)
	{
		for (j = 0; accept[j] != '\0'; ++j)
		{
			if (s[i] == accept[j])
			{
				return (s + i);
			}
		}
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     479       `
#include "main.h"
#include <stdio.h>
/**
* _strstr - a function that locates a substring.
*
* @needle: the string to be looked for
* @haystack: the string to be looked within
*
* Return: a pointer
*
*/
char *_strstr(char *haystack, char *needle)
{
	int m, n;

	for (m = 0; haystack[m] != '\0'; ++m)
	{
		for (n = 0; needle[n] != '\0'; ++n)
		{
			if (haystack[m + n] != needle[n])
			{
				break;
			}
		}
		if (!needle[n])
		{
			return (&haystack[m]);
		}
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     220       `
#include "main.h"

/**
* _abs - program entry
*
* Describtion: The programs prints the abs value
*
* @n: number
*
* Return: The program always returns 0
*
*/

int _abs(int n)
{
	if (n < 0)
		n = (-1) * n;
	return (n);
}
9-strcpy.c/     0           0     0     644     475       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int len, i;

	len = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     265       `
#include <unistd.h>
#include "main.h"

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

